#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from IPython.display import SVG
from keras.utils.vis_utils import model_to_dot, plot_model
from keras.datasets import mnist

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder


mpl.rc('font', size=15)
mpl.rc('figure', figsize=(8, 5))

import model as mod

if __name__ == '__main__':

    # train on MNIST data
    (x_train, y_train_raw), (x_test, y_test_raw) = mnist.load_data()

    x_train = x_train.astype(float) / 255.
    x_test = x_test.astype(float) / 255.
    x_train = x_train.reshape(*x_train.shape, 1)
    x_test = x_test.reshape(*x_test.shape, 1)

    y_train = LabelEncoder().fit_transform(y_train_raw)
    y_train = OneHotEncoder(sparse=False).fit_transform(y_train.reshape(-1, 1))

    y_test = LabelEncoder().fit_transform(y_test_raw)
    y_test = OneHotEncoder(sparse=False).fit_transform(y_test.reshape(-1, 1))

    # create autoencoder
    classifier = mod.classifier_model(reg=0)
    plot_model(classifier, to_file='plots/classifier.png', show_shapes=True,
               show_layer_names=True)

    # training
    stats = classifier.fit(x_train, y_train,
                           epochs=10,
                           batch_size=128,
                           shuffle=True,
                           validation_data=(x_test, y_test))

    # save model
    classifier.save('models/classifier.h5')
